setwd("/Users/yfu/Dropbox/Courses/Rotation/results/2012-12-07/HaibTfbsA549")

# How to plot p-values of hyper and binom:
dev.new()
binom = read.table("HaibTfbsA549_great_binom_p.txt", header=F)
hyper = read.table("HaibTfbsA549_great_hyper_p.txt", header=F)
binom.x = binom$V1
binom.y = binom$V2
hyper.x = hyper$V1
hyper.y = hyper$V2


# First plot
plot(hyper.x, -log(hyper.y), ylim=c(0, 7), pch=16, axe=FALSE, xlab="", ylab="", type="b", col="black", main="HaibTfbsA549 GO:0032465: minus log p-values of binom and hyper")
axis(2, ylim=c(-7, 0), col="black")
mtext("-log p-value of hyper", side=2, line=2.5)
box()
par(new=T)
# log()

# Second plot
plot(binom.x, -log(binom.y), pch=15, xlab="", ylab="", ylim=c(0,30), axe=FALSE, type="b", col="red")
mtext("-log p-value of binom", side=4, col="red", col.axis="red", line=2.5)

axis(4, ylim=c(-30, 0), col="red", col.axis="red")

axis(1, binom.x)

mtext("HOTness", side=1, col="black", line=2.5)

legend(45, 30, legend=c("p-value of binom", "p-value of hyper"), text.col=c("black", "red"), pch=c(16,15), col=c("black", "red"))

dev.new()

plot(binom.x, log(hyper.y/binom.y), pch=16, ylim=c(-1, 24), axe=FALSE , type="b", col="black", main="HaibTfbsA549 GO:0032465: log (p-value of hyper over p-value of binom)")

# x axis
axis(1, binom.x)
axis(2, -1:24)

mtext("HOTness", side=1, col="black", line=2.5)
# mtext("log(hyper.y/binom.y)", side=2, col="black", line=2.5)

setwd("/Users/yfu/Dropbox/Courses/Rotation/results/2012-12-07/HaibTfbsGm12892")
# How to plot p-values of hyper and binom:
dev.new()
binom = read.table("HaibTfbsGm12892_great_binom_p_value.txt", header=F)
hyper = read.table("HaibTfbsGm12892_great_hyper_p_value.txt", header=F)
binom.x = binom$V1
binom.y = binom$V2
hyper.x = hyper$V1
hyper.y = hyper$V2


# First plot
plot(hyper.x, -log(hyper.y), ylim=c(12, 40), pch=16, axe=FALSE, xlab="", ylab="", type="b", col="black", main="HaibTfbsGm12892 GO:0006334: log p-values of binom and hyper")
axis(2, ylim=c(-40, -12), col="black")
mtext("log p-value of hyper", side=2, line=2.5)
box()
par(new=T)
log()

# Second plot
plot(binom.x, -log(binom.y), pch=15, xlab="", ylab="", ylim=c(8,20), axe=FALSE, type="b", col="red")
mtext("log p-value of binom", side=4, col="red", col.axis="red", line=2.5)

axis(4, ylim=c(8, 20), col="red", col.axis="red")

axis(1, binom.x)

mtext("HOTness", side=1, col="black", line=2.5)

legend(0, -18, legend=c("p-value of binom", "p-value of hyper"), text.col=c("black", "red"), pch=c(16,15), col=c("black", "red"))

dev.new()

plot(binom.x, log(hyper.y/binom.y), pch=16, ylim=c(-20, 0), axe=FALSE , type="b", col="black", main="HaibTfbsGm12892 GO:0006334: log (p-value of hyper over p-value of binom)")

# x axis
axis(1, binom.x)
axis(2, -20:0)

mtext("HOTness", side=1, col="black", line=2.5)
# mtext("log(hyper.y/binom.y)", side=2, col="black", line=2.5)

setwd("/Users/yfu/Dropbox/Courses/Rotation/results/2012-12-07/SydhTfbsK562")
# How to plot p-values of hyper and binom:
dev.new()
binom = read.table("SydhTfbsK562_great_binom_p_value.txt", header=F)
hyper = read.table("SydhTfbsK562_great_hyper_p_value.txt", header=F)
binom.x = binom$V1
binom.y = binom$V2
hyper.x = hyper$V1
hyper.y = hyper$V2


# First plot
plot(hyper.x, -log(hyper.y), ylim=c(0, 50), pch=16, axe=FALSE, xlab="", ylab="", type="b", col="black", main="SydhTfbsK562 GO:0034728: log p-values of binom and hyper")
axis(2, ylim=c(0, 50), col="black")
mtext("log p-value of hyper", side=2, line=2.5)
box()
par(new=T)
log()

# Second plot on the same window
plot(binom.x, -log(binom.y), pch=15, xlab="", ylab="", ylim=c(0, 50), axe=FALSE, type="b", col="red")
mtext("log p-value of binom", side=4, col="red", col.axis="red", line=2.5)

axis(4, ylim=c(0, 50), col="red", col.axis="red")

axis(1, binom.x)

mtext("HOTness", side=1, col="black", line=2.5)

legend(65, 50, legend=c("p-value of binom", "p-value of hyper"), text.col=c("black", "red"), pch=c(16,15), col=c("black", "red"))

dev.new()

plot(binom.x, log(hyper.y/binom.y), pch=16, ylim=c(-15, 30), axe=FALSE , type="b", col="black", main="SydhTfbsK562 GO:0034728: log (p-value of hyper over p-value of binom)")

# x axis
axis(1, binom.x)
axis(2, -15:30)

mtext("HOTness", side=1, col="black", line=2.5)
# mtext("log(hyper.y/binom.y)", side=2, col="black", line=2.5)

setwd("/Users/yfu/Dropbox/Courses/Rotation/results/2013-01-06/parsed");
library(gplots);
## This will create heatmaps for bionomial p-values and
## hypergeometric p-values

binomp <- read.table(file="table_100_binomp.txt", header = TRUE);

hyperp <- read.table(file= "table_100_hyperp.txt", header=TRUE);

# Convert the data frames to matrices
b.matrix <- do.call(cbind, binomp);
# Assign the rownames (i.e. the names of the TFs)
rownames(b.matrix) <- rownames(binomp);
# Do the same to hypergeometric p value
h.matrix <- do.call(cbind, hyperp);
rownames(h.matrix) <- rownames(hyperp);

# Though all the GO temrs that I chose are the most common ones,
# some TFs still do not have enrichment in these TFs. As a result,
# in the heatmap of the original p-values, there are a lot of 1s
# and in the heatmap of the minus log p-values, there are a lot
# of Inf's. So I will replace these Inf's with the average of
# the whole matrix.

b.matrix.minus.log <- -log(b.matrix);
h.matrix.minus.log <- -log(h.matrix);


b.matrix.minus.log[is.infinite(b.matrix.minus.log)] <- NA;
b.matrix.minus.log[is.nan(b.matrix.minus.log)] <- NA;

b.matrix.minus.log[is.na(b.matrix.minus.log)] <- mean(b.matrix.minus.log[!is.na(b.matrix.minus.log)]);
h.matrix.minus.log[is.na(h.matrix.minus.log)] <- mean(h.matrix.minus.log[!is.na(h.matrix.minus.log)]);

h.matrix.minus.log[h.matrix.minus.log==0] <- mean(h.matrix.minus.log[!is.infinite(h.matrix.minus.log)])
b.matrix.minus.log[b.matrix.minus.log==0] <- mean(b.matrix.minus.log[!is.infinite(b.matrix.minus.log)])
# Use heatmap.2 from gplots instead.

# For the colors on both sides
# Use ColSideColors
# Sadly, that is not possible since I need a vector of length of 100...

pdf("binom_p_value_large.pdf", width = 7, height=20);
## heatmap.2(b.matrix.minus.log, trace="none", lhei=c(1,15), cexRow = 0.25)
heatmap.2(b.matrix.minus.log, cexRow = 0.25,cexCol = 0.25, col=redgreen, trace="none", lhei=c(1,15));
# Save the heatmap since I want to get the names of rows and columns later
a <- heatmap.2(b.matrix.minus.log, cexRow = 0.25,cexCol = 0.25, col=redgreen, trace="none", lhei=c(1,15));

dev.off();

pdf("binom_p_value_normal.pdf");
heatmap.2(b.matrix.minus.log, col=redgreen, trace="none");
dev.off();

pdf("hyper_p_value_large.pdf", width = 7, height=20);
## heatmap.2(h.matrix.minus.log, trace="none", lhei=c(1,15), cexRow = 0.25)
heatmap.2(h.matrix.minus.log, cexRow = 0.25, cexCol = 0.25, col=redgreen, trace="none", lhei=c(1,15));
# Save the heatmaps since I want to get the names of rows and columns later
b <- heatmap.2(h.matrix.minus.log, cexRow = 0.25, cexCol = 0.25, col=redgreen, trace="none", lhei=c(1,15));
dev.off();

pdf("hyper_p_value_normal.pdf");
heatmap.2(h.matrix.minus.log, col=redgreen, trace="none");
dev.off()

# Choose between the corresponding elements in the matrices the lower one
b.smaller.than.h = b.matrix.minus.log < h.matrix.minus.log;
b.larger.than.h = b.matrix.minus.log > h.matrix.minus.log;

min.minus.log = b.matrix.minus.log;
min.minus.log [b.smaller.than.h] = b.matrix.minus.log [b.smaller.than.h];
min.minus.log [b.larger.than.h] = h.matrix.minus.log [b.larger.than.h];

pdf("combined-min-minus-log.pdf", width = 7, height = 20);
heatmap.2(min.minus.log, cexRow = 0.25, cexCol = 0.25, col = redgreen, trace = "none", lhei=c(1,15));
dev.off();

# Choose between the corresponding elements in the matrices the higher one
max.minus.log = b.matrix.minus.log;
max.minus.log [b.larger.than.h] = b.matrix.minus.log [b.larger.than.h];
max.minus.log [b.smaller.than.h] = b.matrix.minus.log [b.smaller.than.h];

pdf("combined-max-minus-log.pdf", width = 7, height = 20);
heatmap.2(max.minus.log, cexRow = 0.25, cexCol = 0.25, col = redgreen, trace = "none", lhei = c(1,15));
dev.off();

a
a$rowInd
row.names(b.matrix.minus.log)
cols <- a$colInd
row.names(b.matrix.minus.log) [cols]
col.names(b.matrix.minus.log) [cols]
colnames(b.matrix.minus.log) [ cols ]
cols <- a$colInd
a = c(1,2,3,4,5)
a[1:4
]
b.matrix.minus.log[, 'GO.0044424']
b.matrix.minus.log[, 'GO.0044424']
cols <- a$colInd
# One thing to keep in mind: b.go.terms contains the GO terms in
# order
b.go.terms <- colnames(b.matrix.minus.log)[cols]
# I'll remove the most significant 40 GO terms
b.go.terms <- b.go.terms[41:100]
b.go.terms <- colnames(b.matrix.minus.log)[cols]

b.go.terms
b.go.terms.less.sig <- b.matrix.minus.log[,cols]

heatmap.2(b.go.terms.less.sig)
pdf("biom_p_value_large_exclusing the most significant 40 GO terms", width = 7, height= 20)
# Prevent those very significant GO terms from masking other GO terms
# so, just remove them. Sweet, huh?
cols <- a$colInd
# I'll remove the most significant 40 GO terms
b.go.terms.less.sig <- b.matrix.minus.log[,cols]
heatmap.2(b.go.terms.less.sig, cexRow = 0.25, cexCol = 0.25, col=redgreen, trace="none", lhei=c(1,15));
dev.off;
cols <- a$colInd

cols <- a$colInd

a <- heatmap.2(b.matrix.minus.log, cexRow = 0.25,cexCol = 0.25, col=redgreen, trace="none", lhei=c(1,15));

cols <- a$colInd

b.go.terms.less.sig <- b.matrix.minus.log[,cols]

heatmap.2(b.go.terms.less.sig, cexRow = 0.25, cexCol = 0.25, col=redgreen, trace="none", lhei=c(1,15));

dev.off()

pdf("biom_p_value_large_exclusing the most significant 40 GO terms", width = 7, height= 20)
# Prevent those very significant GO terms from masking other GO terms
# so, just remove them. Sweet, huh?
cols <- a$colInd
# I'll remove the most significant 40 GO terms
b.go.terms.less.sig <- b.matrix.minus.log[,cols]
heatmap.2(b.go.terms.less.sig, cexRow = 0.25, cexCol = 0.25, col=redgreen, trace="none", lhei=c(1,15));
dev.off;
pdf("Test")
dev.new()
heatmap.2(b.go.terms.less.sig, cexRow = 0.25, cexCol = 0.25, col=redgreen, trace="none", lhei=c(1,15));

pdf("test", width = 7, height = 20)
